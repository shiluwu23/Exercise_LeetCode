/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;
        
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> (a.val - b.val));
        for(ListNode node: lists){
            if(node != null) minHeap.offer(node);
        }
        
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        
        while(!minHeap.isEmpty()){
            ListNode min = minHeap.poll();
            if(min.next != null) minHeap.offer(min.next);
            curr.next = min;
            curr = curr.next;
        }
        return dummy.next;
    }
}

*Time complexity : O(Nlogk) where k is the number of linked lists. The comparison cost will be reduced to O(logk) for every pop and insertion to priority queue. But finding the node with the smallest value just costs O(1) time. 
There are N nodes in the final linked list.*
*Space complexity : O(n) Creating a new linked list costs O(n) space.*

